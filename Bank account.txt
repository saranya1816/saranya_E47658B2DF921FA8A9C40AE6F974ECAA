Bank account Class Implementation


Use
''' implement a class called BankAccount that represents a bank account. The class should have private attributes for account number, account holder name, and account balance.  Include methods to deposit money,  witdraw money, and  display the account balancd.  Ensure that the account balance cannot be accessed directly from outside the class.  Writej a program to create an instance of the BankAccount class and test the deposit and withdrawal functionality.'''
Here's a Python implementation of the BankAccount class as described, along with a simple program to test its functionality:

python
Copy code
class BankAccount:
    def __init__(self, account_number, account_holder_name, initial_balance=0):
        self.__account_number = account_number
        self.__account_holder_name = account_holder_name
        self.__account_balance = initial_balance

    def deposit(self, amount):
        if amount > 0:
            self.__account_balance += amount
            print(f"Deposited ${amount}. New balance: ${self.__account_balance}")
        else:
            print("Invalid deposit amount. Amount must be greater than zero.")

    def withdraw(self, amount):
        if amount > 0:
            if self.__account_balance >= amount:
                self.__account_balance -= amount
                print(f"Withdrew ${amount}. New balance: ${self.__account_balance}")
            else:
                print("Insufficient balance.")
        else:
            print("Invalid withdrawal amount. Amount must be greater than zero.")

    def display_balance(self):
        print(f"Account balance for {self.__account_holder_name} (Account #{self.__account_number}): ${self.__account_balance}")


# Test the BankAccount class
if __name__ == "__main__":
    # Create an instance of the BankAccount class
    account1 = BankAccount("12345", "John Doe", 1000)

    # Test deposit and withdrawal functionality
    account1.display_balance()
    account1.deposit(500)
    account1.withdraw(200)
    account1.withdraw(1500)  # Attempt to withdraw more than the balance
    account1.deposit(-100)   # Attempt to deposit a negative amount
    account1.display_balance()
